{"version":3,"sources":["components/Search-bar/SearchBar.js","components/Result-list/Result-list-item/ResultListItem.js","components/Result-list/Page-bar/PageBar.js","components/Result-list/ResultList.js","resources/properties.js","utils/api.js","controllers/MovieController.js","components/Nominations/Nomination-list-item/ListItem.js","components/Nominations/Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","handleInput","e","setLoadingState","searchByTitle","title","target","value","trim","bind","_","debounce","this","className","type","id","placeholder","autoComplete","onChange","Component","ResultListItem","useState","isNominated","setIsNominated","useEffect","year","disabled","onClick","handleNomination","PageBar","state","currPage","updatePageNum","prevPage","nextPage","num","parseInt","setState","Array","from","numOfPages","i","ResultList","movies","movieData","isLoading","didFinishNominate","prevProps","movie","isArray","map","properties","axios","create","baseURL","responseType","timeout","MovieController","params","apiKey","query","queryParameter","s","page","api","get","ListItem","onRemove","Nominations","nominations","prevState","length","item","App","movieController","setDidFinishNominate","isLoadingState","setMovieData","setNumOfPages","currTitle","setCurrTitle","JSON","parse","localStorage","getItem","setNominations","checkNominated","filter","setLocalData","then","data","responseData","Response","imdbID","push","Title","Year","processMovieData","Search","isNaN","totalResults","totalPages","Math","ceil","processPagedData","console","log","Error","catch","err","response","handleError","finally","newNominations","setItem","stringify","prevNominations","tempMovieData","newList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yaAiCeA,G,wDA3BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAUVC,YAAc,SAACC,GACX,EAAKF,MAAMG,iBAAgB,GAC3B,EAAKC,cAAc,CAACC,MAAOH,EAAEI,OAAOC,MAAMC,UAX1C,EAAKP,YAAc,EAAKA,YAAYQ,KAAjB,gBACnB,EAAKL,cAAgB,EAAKA,cAAcK,KAAnB,gBACrB,EAAKL,cAAgBM,IAAEC,SAAS,EAAKP,cAAe,KAJrC,E,0DAOLC,GACVO,KAAKZ,MAAMI,cAAcC,K,+BASzB,OACI,sBAAKQ,UAAU,aAAf,UACI,4CACA,uBAAOC,KAAK,OAAOC,GAAG,eAAeC,YAAY,YAAYC,aAAa,MAAMC,SAAUN,KAAKX,qB,GAtBvFkB,cCwBTC,G,YAzBQ,SAACpB,GAAW,IAAD,EACQqB,oBAAS,GADjB,mBACvBC,EADuB,KACVC,EADU,KAG9BC,qBAAU,WACND,EAAevB,EAAMsB,eACtB,CAACtB,EAAMsB,cAUV,OACI,sBAAKT,UAAU,mBAAf,UACI,sBAAKA,UAAU,QAAf,UACKb,EAAMK,MADX,KACoBL,EAAMyB,KAD1B,OAGA,wBAAQC,SAAUJ,EAAaK,QAbd,WACrB3B,EAAM4B,iBAAiB,CACnBvB,MAAOL,EAAMK,MACboB,KAAMzB,EAAMyB,KACZV,GAAIf,EAAMe,MASV,2BCoCGc,G,wDAvDX,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IACD8B,MAAQ,CACTC,SAAU,GAEd,EAAKC,cAAgB,EAAKA,cAAcvB,KAAnB,gBACrB,EAAKwB,SAAW,EAAKA,SAASxB,KAAd,gBAChB,EAAKyB,SAAW,EAAKA,SAASzB,KAAd,gBAPD,E,0DAULP,GACV,IAAIiC,EAAMC,SAASlC,EAAEI,OAAOC,OAC5BK,KAAKyB,SAAS,CAACN,SAAUI,IACzBvB,KAAKZ,MAAMgC,cAAcG,K,iCAGjB,IAAD,OACPvB,KAAKyB,SAAS,CACVN,SAAUnB,KAAKkB,MAAMC,SAAW,IACjC,WACC,EAAK/B,MAAMgC,cAAc,EAAKF,MAAMC,e,iCAIhC,IAAD,OACPnB,KAAKyB,SAAS,CACVN,SAAUnB,KAAKkB,MAAMC,SAAW,IACjC,WACC,EAAK/B,MAAMgC,cAAc,EAAKF,MAAMC,e,+BAKxC,OACI,sBAAKlB,UAAU,WAAf,UACI,wBAAQA,UAAU,cAAca,SAAkC,IAAxBd,KAAKkB,MAAMC,SAAgBJ,QAASf,KAAKqB,SAAnF,kBACA,sBAAKpB,UAAU,WAAf,UACI,wBAAQA,UAAU,qBAAqBK,SAAUN,KAAKoB,cAAezB,MAAOK,KAAKkB,MAAMC,SAAvF,SAEQO,MAAMC,KAAKD,MAAM1B,KAAKZ,MAAMwC,aAAa,SAACtC,EAAGuC,GACzC,OAAO,wBAEHlC,MAAOkC,EAAE,EAFN,SAGLA,EAAE,GAFKA,EAAE,QAMvB,uCAAU7B,KAAKZ,MAAMwC,iBAEzB,wBAAQ3B,UAAU,cAAca,SAAUd,KAAKkB,MAAMC,WAAanB,KAAKZ,MAAMwC,WAAYb,QAASf,KAAKsB,SAAvG,yB,GAlDMf,cCuEPuB,E,kDAnEX,WAAY1C,GAAQ,IAAD,8BACf,cAAMA,IACD8B,MAAQ,CACTa,OAAQ,EAAK3C,MAAM4C,WAAa,KAChCC,UAAW,EAAK7C,MAAM6C,UACtBC,kBAAmB,EAAK9C,MAAM8C,mBAElC,EAAKd,cAAgB,EAAKA,cAAcvB,KAAnB,gBACrB,EAAKmB,iBAAmB,EAAKA,iBAAiBnB,KAAtB,gBART,E,+DAWAsC,GAEXA,EAAUH,YAAchC,KAAKZ,MAAM4C,WACnChC,KAAKyB,SAAS,CAACM,OAAQ/B,KAAKZ,MAAM4C,YAElCG,EAAUF,YAAcjC,KAAKZ,MAAM6C,WACnCjC,KAAKyB,SAAS,CAACQ,UAAWjC,KAAKZ,MAAM6C,YAErCE,EAAUD,oBAAsBlC,KAAKZ,MAAM8C,mBAC3ClC,KAAKyB,SAAS,CAACS,kBAAmBlC,KAAKZ,MAAM8C,sB,oCAIvCX,GACVvB,KAAKZ,MAAMgC,cAAcG,K,uCAIZa,GACbpC,KAAKZ,MAAM4B,iBAAiBoB,K,+BAGtB,IAAD,OACL,OACI,sBAAKnC,UAAU,cAAf,UACI,+CAEID,KAAKkB,MAAMe,UAAY,qBAAKhC,UAAU,cAAf,qBACnBD,KAAKkB,MAAMa,OACFL,MAAMW,QAAQrC,KAAKkB,MAAMa,QACtB,sBAAK9B,UAAU,YAAf,UACKD,KAAKkB,MAAMa,OAAOO,KAAI,SAACF,EAAOP,GAC3B,OAAO,cAAC,EAAD,CAEHpC,MAAO2C,EAAM3C,MACboB,KAAMuB,EAAMvB,KACZV,GAAIiC,EAAMjC,GACVO,cAAa,EAAKQ,MAAMgB,mBAA2BE,EAAM1B,YACzDM,iBAAoB,EAAKA,kBALpBa,MAQb,cAAC,EAAD,CACIT,cAAepB,KAAKoB,cACpBQ,WAAY5B,KAAKZ,MAAMwC,gBAGzC,qBAAK3B,UAAU,cAAf,SAA8BD,KAAKkB,MAAMa,SAC7C,qBAAK9B,UAAU,cAAf,qC,GA5DGM,a,yBCLZgC,EACD,WADCA,EAEH,0B,QCCKC,E,OAAAA,EAAMC,OAAO,CACxBC,QAASH,EACTI,aAAc,OACdC,QAAS,MCkBEC,E,WApBX,aAAe,oBACX7C,KAAK8C,OAAS,CACVC,OAAQR,GAEZvC,KAAKR,cAAgBQ,KAAKR,cAAcK,KAAKG,M,mGAG7BgD,G,gFACZC,EAAiB,CAACF,OAAQ/C,KAAK8C,OAAOC,OAAQG,EAAGF,EAAMvD,MAAOS,KAAM,SACpE8C,EAAMG,OACNF,EAAeE,KAAOH,EAAMG,M,SAEbC,EAAIC,IAAI,IAAK,CAC5BP,OAAQG,I,cADRlB,E,yBAGGA,G,8GCDAuB,G,YAfE,SAAClE,GAKd,OACI,sBAAKa,UAAU,mBAAf,UACI,sBAAKA,UAAU,QAAf,UACKb,EAAMK,MADX,KACoBL,EAAMyB,KAD1B,OAGA,wBAAQE,QATC,WACb3B,EAAMmE,SAASnE,EAAMe,KAQjB,yBC4BGqD,E,kDApCX,WAAYpE,GAAQ,IAAD,8BACf,cAAMA,IACD8B,MAAQ,CACTuC,YAAa,EAAKrE,MAAMqE,aAAe,IAH5B,E,+DAQAC,GACXA,EAAUD,YAAYE,SAAW3D,KAAKZ,MAAMqE,YAAYE,QACxD3D,KAAKyB,SAAS,CACVgC,YAAazD,KAAKZ,MAAMqE,gB,+BAK1B,IAAD,OACL,OACI,sBAAKxD,UAAU,cAAf,UACI,4CAEID,KAAKkB,MAAMuC,YAAYnB,KAAI,SAACsB,EAAM/B,GAC9B,OAAQ,cAAC,EAAD,CAEJpC,MAAOmE,EAAKnE,MACZoB,KAAM+C,EAAK/C,KACXV,GAAIyD,EAAKzD,GACToD,SAAU,EAAKnE,MAAMmE,UAJhB1B,a,GAxBPtB,aCkKXsD,MA/Jf,WACI,IAAMC,EAAkB,IAAIjB,EADjB,EAKuCpC,oBAAS,GALhD,mBAKJyB,EALI,KAKe6B,EALf,OAe+BtD,oBAAS,GAfxC,mBAeJuD,EAfI,KAeYzE,EAfZ,OAgBuBkB,mBAAS,MAhBhC,mBAgBJuB,EAhBI,KAgBOiC,EAhBP,OAiByBxD,mBAAS,MAjBlC,mBAiBJmB,EAjBI,KAiBQsC,EAjBR,OAkBuBzD,mBAAS,IAlBhC,mBAkBJ0D,EAlBI,KAkBOC,EAlBP,OAmB2B3D,oBAZZ,WACtB,IAAIgD,EAAcY,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB,GAIrE,OAHIf,EAAYE,QANI,GAOhBI,GAAqB,GAElBN,KAZA,mBAmBJA,EAnBI,KAmBSgB,EAnBT,KAuBLC,EAAiB,SAACvE,GACpB,OAAOsD,EAAYkB,QAAO,SAAArF,GAAC,OAAIA,EAAEa,KAAOA,KAAIwD,OAAS,GAGzD/C,qBAAU,WACF6C,EAAYE,QAzBI,EA0BhBI,GAAqB,GAErBA,GAAqB,GAEzBa,EAAanB,KACd,CAACA,IAEJ,IA4BMjE,EAAgB,SAACwD,GACfA,GACAoB,EAAapB,EAAMvD,OACnBqE,EAAgBtE,cAAcwD,GAAO6B,MAAK,SAAC9C,GACvC,GAAIA,EAAO+C,KAAM,CACT,IAAIC,EAAehD,EAAO+C,KACI,SAA1BC,EAAaC,UACbf,EAvBC,SAACa,GACtB,IAAI/C,EAAS,GACb,GAAI+C,EAAM,CAAC,IAAD,gBACYA,GADZ,IACN,2BAAwB,CAAC,IAAhB1C,EAAe,QAChB1B,EAAcgE,EAAetC,EAAM6C,QACvClD,EAAOmD,KAAK,CACRzF,MAAO2C,EAAM+C,MACbtE,KAAMuB,EAAMgD,KACZjF,GAAIiC,EAAM6C,OACVvE,YAAaA,KAPf,+BAWV,OAAOqB,EAU0BsD,CAAiBN,EAAaO,SA/B1C,SAACR,GACtB,GAAIA,IAASS,MAAMT,GAAO,CACtB,IAAIU,EAAehE,SAASsD,GACxBW,EAAaC,KAAKC,KAAKH,EAAa,IACxCtB,EAAcuB,IA4BEG,CAAiBb,EAAaS,gBAE9BK,QAAQC,IAAIf,EAAagB,OACzB9B,EAAac,EAAagB,YAGvCC,OAAM,SAACC,GACFA,EAAIC,UACJC,EAAYF,EAAIC,SAASpB,SAE9BsB,SAAQ,WACP7G,GAAgB,QAGpB0E,EAAa,MACb1E,GAAgB,KAIlB4G,EAAc,SAACF,GAEbJ,QAAQC,IAAIG,IAWdrB,EAAe,SAACyB,GAClB9B,aAAa+B,QAAQ,cAAejC,KAAKkC,UAAUF,KAgCvD,OACI,sBAAKpG,UAAU,MAAf,UACI,6CACA,cAAC,EAAD,CAAWT,cAAeA,EAAeD,gBAxG9B,SAAC2B,GAChB3B,EAAgB2B,MAwGZ,sBAAKjB,UAAU,WAAf,UACI,cAAC,EAAD,CACI+B,UAAWA,EACXC,UAAW+B,EACXpC,WAAYA,EACZR,cAlDM,SAACG,GAKnB/B,EAJY,CACRC,MAAO0E,EACPhB,KAAM5B,KAgDEP,iBAvCU,SAACoB,GACvB,GAAIqB,EAAYE,OA1GI,EA0GsB,CACtCc,GAAe,SAAC+B,GACZ,MAAM,GAAN,mBAAWA,GAAX,CAA4BpE,OAEhC,IAAIqE,EAAa,YAAOzE,GACxB,IAAK,IAAIH,KAAK4E,EACNA,EAAc5E,GAAG1B,KAAOiC,EAAMjC,KAC9BsG,EAAc5E,GAAGnB,aAAc,GAGvCuD,EAAawC,KA6BLvE,kBAAmBA,IAEvB,cAAC,EAAD,CACIuB,YAAaA,EACbF,SA7BC,SAACpD,GACd,IAAIuG,EAAUjD,EAAYkB,QAAO,SAACf,GAAD,OAAUA,EAAKzD,KAAOA,KAEvD,GADAsE,EAAeiC,GACXhF,MAAMW,QAAQL,GAAY,CAC1B,IAAIyE,EAAa,YAAOzE,GACxB,IAAK,IAAIH,KAAK4E,EACNA,EAAc5E,GAAG1B,KAAOA,IACxBsG,EAAc5E,GAAGnB,aAAc,GAGvCuD,EAAawC,cChIVE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5fbed2f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash'\nimport './SearchBar.scss';\n\nclass SearchBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleInput = this.handleInput.bind(this);\n        this.searchByTitle = this.searchByTitle.bind(this);\n        this.searchByTitle = _.debounce(this.searchByTitle, 500);\n    }\n\n    searchByTitle(title) {\n        this.props.searchByTitle(title);\n    }\n\n    handleInput = (e) => {\n        this.props.setLoadingState(true);\n        this.searchByTitle({title: e.target.value.trim()});\n    }\n\n    render() {\n        return (\n            <div className=\"search-bar\">\n                <p>Movie Title</p>\n                <input type=\"text\" id=\"search-field\" placeholder=\"Search...\" autoComplete=\"off\" onChange={this.handleInput}></input>\n            </div>\n        )\n    }\n\n}\n\nexport default SearchBar;","import React, { useEffect, useState } from 'react';\nimport './ResultListItem.scss';\n\nconst ResultListItem = (props) => {\n    const [isNominated, setIsNominated] = useState(false);\n\n    useEffect(() => {\n        setIsNominated(props.isNominated);\n    }, [props.isNominated])\n\n    const handleNomination = () => {\n        props.handleNomination({\n            title: props.title,\n            year: props.year,\n            id: props.id,\n        });\n    }\n\n    return (\n        <div className=\"result-list-item\">\n            <div className=\"title\">\n                {props.title} ({props.year})\n            </div>\n            <button disabled={isNominated} onClick={handleNomination}>Nominate</button>\n        </div>\n    )\n}\n\nexport default ResultListItem","import React, { Component } from 'react';\nimport './PageBar.scss';\n\nclass PageBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currPage: 1\n        };\n        this.updatePageNum = this.updatePageNum.bind(this);\n        this.prevPage = this.prevPage.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n    }\n\n    updatePageNum(e) {\n        let num = parseInt(e.target.value)\n        this.setState({currPage: num});\n        this.props.updatePageNum(num);\n    }\n\n    prevPage() {\n        this.setState({\n            currPage: this.state.currPage - 1\n        }, () => {\n            this.props.updatePageNum(this.state.currPage);\n        });\n    }\n\n    nextPage() {\n        this.setState({\n            currPage: this.state.currPage + 1\n        }, () => {\n            this.props.updatePageNum(this.state.currPage);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"page-bar\">\n                <button className=\"page-button\" disabled={this.state.currPage === 1} onClick={this.prevPage}>Prev</button>\n                <div className=\"page-num\">\n                    <select className=\"page-num-selection\" onChange={this.updatePageNum} value={this.state.currPage}>\n                        {\n                            Array.from(Array(this.props.numOfPages), (e, i) => {\n                                return <option\n                                    key={i+1}\n                                    value={i+1}\n                                >{i+1}</option>\n                            })\n                        }\n                    </select>\n                    <span> / {this.props.numOfPages}</span>\n                </div>\n                <button className=\"page-button\" disabled={this.state.currPage === this.props.numOfPages} onClick={this.nextPage}>Next</button>\n            </div>\n        )\n    }\n}\n\nexport default PageBar","import React, { Component } from 'react';\nimport './ResultList.scss';\nimport ResultListItem from './Result-list-item/ResultListItem'\nimport PageBar from './Page-bar/PageBar';\n\nclass ResultList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            movies: this.props.movieData || null,\n            isLoading: this.props.isLoading,\n            didFinishNominate: this.props.didFinishNominate\n        }\n        this.updatePageNum = this.updatePageNum.bind(this);\n        this.handleNomination = this.handleNomination.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        // TODO: Movie data state is updated but the display is not updated.\n        if (prevProps.movieData !== this.props.movieData) {\n            this.setState({movies: this.props.movieData});\n        }\n        if (prevProps.isLoading !== this.props.isLoading) {\n            this.setState({isLoading: this.props.isLoading});\n        }\n        if (prevProps.didFinishNominate !== this.props.didFinishNominate) {\n            this.setState({didFinishNominate: this.props.didFinishNominate})\n        }\n    }\n\n    updatePageNum(num) {\n        this.props.updatePageNum(num);\n        // this.props.setLoadingState(true);\n    }\n\n    handleNomination(movie) {\n        this.props.handleNomination(movie);\n    }\n\n    render() {\n        return (\n            <div className=\"result-list\">\n                <p>Search results</p>\n                {\n                    this.state.isLoading ? <div className=\"placeholder\">Loading</div> : \n                        this.state.movies ? \n                                (Array.isArray(this.state.movies) ? \n                                    <div className=\"list-body\">\n                                        {this.state.movies.map((movie, i) => {\n                                            return <ResultListItem\n                                                key={i}\n                                                title={movie.title}\n                                                year={movie.year}\n                                                id={movie.id}\n                                                isNominated={this.state.didFinishNominate ? true : movie.isNominated}\n                                                handleNomination = {this.handleNomination}\n                                            ></ResultListItem>\n                                        })}\n                                        <PageBar \n                                            updatePageNum={this.updatePageNum} \n                                            numOfPages={this.props.numOfPages}\n                                        ></PageBar>\n                                    </div>\n                        : <div className=\"placeholder\">{this.state.movies}</div>)\n                    : <div className=\"placeholder\">Search something</div>\n                            \n\n                }\n            </div>\n        )\n    }\n}\n\nexport default ResultList","export const properties = {\n    apikey: \"812bf1e0\",\n    host: \"http://www.omdbapi.com/\"\n}","import axios from 'axios';\nimport { properties } from './../resources/properties';\n\nexport default axios.create({\n    baseURL: properties.host,\n    responseType: \"json\",\n    timeout: 5000\n});","import { properties } from './../resources/properties';\nimport api from './../utils/api';\n\nclass MovieController {\n    constructor() {\n        this.params = {\n            apiKey: properties.apikey\n        };\n        this.searchByTitle = this.searchByTitle.bind(this);\n    }\n\n    async searchByTitle(query) {\n        let queryParameter = {apiKey: this.params.apiKey, s: query.title, type: \"movie\"};\n        if (query.page) {\n            queryParameter.page = query.page\n        }\n        let movies = await api.get('/', {\n            params: queryParameter\n        });\n        return movies;\n    }\n\n}\n\nexport default MovieController","import React from 'react';\nimport './ListItem.scss';\n\nconst ListItem = (props) => {\n    const onRemove = () => {\n        props.onRemove(props.id);\n    }\n\n    return (\n        <div className=\"result-list-item\">\n            <div className=\"title\">\n                {props.title} ({props.year})\n            </div>\n            <button onClick={onRemove}>Remove</button>\n        </div>\n    )\n}\n\nexport default ListItem","import React, { Component } from 'react';\nimport './Nominations.scss';\nimport ListItem from './Nomination-list-item/ListItem'\n\nclass Nominations extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            nominations: this.props.nominations || []\n        }\n\n    }\n\n    componentDidUpdate(prevState) {\n        if (prevState.nominations.length !== this.props.nominations.length) {\n            this.setState({\n                nominations: this.props.nominations\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"nominations\">\n                <p>Nominations</p>\n                {\n                    this.state.nominations.map((item, i) => {\n                        return (<ListItem\n                            key={i}\n                            title={item.title}\n                            year={item.year}\n                            id={item.id}\n                            onRemove={this.props.onRemove}\n                        ></ListItem>)\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Nominations","import React, { useEffect, useState } from 'react'\nimport './App.scss';\nimport SearchBar from './components/Search-bar/SearchBar';\nimport ResultList from './components/Result-list/ResultList';\nimport MovieController from './controllers/MovieController';\nimport Nominations from './components/Nominations/Nominations';\n\nfunction App() {\n    const movieController = new MovieController();\n\n    const MAX_NOMINATIONS = 5\n\n    const [didFinishNominate, setDidFinishNominate] = useState(false);\n\n    const retrieveLocalData = () => {\n        let nominations = JSON.parse(localStorage.getItem('nominations')) || [];\n        if (nominations.length >= MAX_NOMINATIONS) {\n            setDidFinishNominate(true);\n        }\n        return nominations;\n    }\n\n    const [isLoadingState, setLoadingState] = useState(false);\n    const [movieData, setMovieData] = useState(null);\n    const [numOfPages, setNumOfPages] = useState(null);\n    const [currTitle, setCurrTitle] = useState(\"\");\n    const [nominations, setNominations] = useState(retrieveLocalData);\n\n    //TODO: Save to local on unmount or save to local on nomination\n\n    const checkNominated = (id) => {\n        return nominations.filter(e => e.id === id).length > 0\n    }\n\n    useEffect(() => {\n        if (nominations.length >= MAX_NOMINATIONS) {\n            setDidFinishNominate(true);\n        } else {\n            setDidFinishNominate(false);\n        }\n        setLocalData(nominations);\n    }, [nominations])\n\n    const setLoading = (state) => {\n        setLoadingState(state);\n    }\n\n    const processPagedData = (data) => {\n        if (data && !isNaN(data)) {\n            let totalResults = parseInt(data);\n            let totalPages = Math.ceil(totalResults/10);\n            setNumOfPages(totalPages);\n        }\n    }\n\n    const processMovieData = (data) => {\n        let movies = [];\n        if (data) {\n            for (let movie of data) {\n                let isNominated = checkNominated(movie.imdbID);\n                movies.push({\n                    title: movie.Title,\n                    year: movie.Year,\n                    id: movie.imdbID,\n                    isNominated: isNominated\n                });\n            }\n        }\n        return movies;\n    }\n\n    const searchByTitle = (query) => {\n        if (query) {\n            setCurrTitle(query.title);\n            movieController.searchByTitle(query).then((movies) => {\n                if (movies.data) {\n                        let responseData = movies.data;\n                        if (responseData.Response === \"True\") {\n                            setMovieData(processMovieData(responseData.Search));\n                            processPagedData(responseData.totalResults);\n                        } else {\n                            console.log(responseData.Error);\n                            setMovieData(responseData.Error);\n                        }\n                }\n            }).catch((err) => {\n                if (err.response) {\n                    handleError(err.response.data);\n                }\n            }).finally(() => {\n                setLoadingState(false);\n            });\n        } else {\n            setMovieData(null);\n            setLoadingState(false);\n        }\n    }\n\n    const handleError = (err) => {\n            // TODO: Modal error\n            console.log(err);\n    }\n\n    const updatePageNum = (num) => {\n        let query = {\n            title: currTitle,\n            page: num\n        }\n        searchByTitle(query)\n    }\n\n    const setLocalData = (newNominations) => {\n        localStorage.setItem(\"nominations\", JSON.stringify(newNominations))\n    }\n\n    const updateNominations = (movie) => {\n        if (nominations.length < MAX_NOMINATIONS) {\n            setNominations((prevNominations) => {\n                return [...prevNominations, movie];\n            })\n            let tempMovieData = [...movieData];\n            for (let i in tempMovieData) {\n                if (tempMovieData[i].id === movie.id) {\n                    tempMovieData[i].isNominated = true;\n                }\n            }\n            setMovieData(tempMovieData);\n        }\n    }\n\n    const onRemove = (id) => {\n        let newList = nominations.filter((item) => item.id !== id);\n        setNominations(newList)\n        if (Array.isArray(movieData)) {\n            let tempMovieData = [...movieData];\n            for (let i in tempMovieData) {\n                if (tempMovieData[i].id === id) {\n                    tempMovieData[i].isNominated = false;\n                }\n            }\n            setMovieData(tempMovieData);\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>The Shoppie</h1>\n            <SearchBar searchByTitle={searchByTitle} setLoadingState={setLoading}></SearchBar>\n            <div className=\"app-body\">\n                <ResultList \n                    movieData={movieData} \n                    isLoading={isLoadingState} \n                    numOfPages={numOfPages}\n                    updatePageNum={updatePageNum}\n                    handleNomination={updateNominations}\n                    didFinishNominate={didFinishNominate}\n                ></ResultList>\n                <Nominations \n                    nominations={nominations}\n                    onRemove={onRemove}\n                ></Nominations>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}